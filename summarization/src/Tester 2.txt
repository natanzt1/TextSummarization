Dalam pengembangan sistem menggunakan arsitektur API-Driven, hal yang biasa dilakukan adalah komunikasi antar service akan dilakukan via API call, bisa menggunakan RESTful, RPC atau sejenisnya, kurang lebih komunikasi akan dilakukan secara synchronous. Pada kasus pembuatan pesanan, misalnya request dari pengguna akan dikirim ke order-service, selanjutnya order-service akan melakukan API call ke payment-service untuk membuat pembayaran untuk pesanan tersebut, dan terakhir order-service akan membuat API call ke email-service untuk mengirim email ke pelanggan tentang detail pesanannya.
API-Driven biasanya disebut dengan Orchestration Pattern, yang memiliki arti akan ada satu service yang berperan sebagai orkestrator. Service orkestrator ini bertanggung jawab terhadap jalannya alur bisnis pada aksi tersebut. Pada kasus pembuatan pesanan, order-service adalah orkestratornya, sedangkan payment-service dan email-service hanya mengikuti apa yang diperintahkan oleh order-service.
Kelebihan API Driven
API-First Development merupakan semua type dari komunikasi
API-First Development tidak selalu menggunakan jaringan
API-First Development memfasilitasi interaksi langsung antara 2 aplikasi yang berbeda
Kekurangan API Driven
Saat terjadi perubahan alur bisnis, misal ada service baru dengan nama risk-service untuk melakukan kalkulasi risk setiap pesanan, maka secara otomatis risk-service harus di panggil oleh service orkestrator nya. Dalam artian, setiap ada yang membutuhkan data pesanan, order-service harus melakukan perubahan code.
Belum lagi permasalahan dengan latency, setiap API call terhadap sistem lain yang dilakukan, maka secara otomatis akan menambah latency terhadap waktu response si service orkestrator. Makin banyak API call yang harus dilakukan, secara langsung akan meningkatkan response time si API call, sehingga makin lama, Orchestration Pattern tidak mudah untuk di-scale.
Selain itu, service orkestrator akan sangat bergantung terhadap service yang lain yang dia panggi. Pada kasus kita, order-service sangat bergantung terhadap payment-service, risk-service, dan email-service. Jika terjadi kesalahan pada service yang dia panggil, otomatis akan membuat service orkestrator menjadi tidak stabil.
