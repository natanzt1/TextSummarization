Seperti namanya “Mono” berarti satu , monolitik arsitektur merupakan sebuah arsitektur dimana dalam pembuatan aplikasi. semua komponen menjadi satu kesatuan. Dalam hal ini satu kesatuan berarti menyatukan antara front-end dan backend dalam satu aplikasi yang sama. 
Sistem Monolitik Definisi : Sistem operasi sebagai kumpulan prosedur yang dapat dipanggil oleh prosedur lain jika diperlukan. Prosedur ini terdapat didalam kernel atau inti. Menggunakan konsep kernel loadable modules pengembangan, pengujian dan fleksibilitas sistem operasi. Karakteristik : Prosedur dapat saling dipanggil oleh prosedur lain di sistem bila diperlukan dan kernel berisi semua layanan yang disediakan sistem operasi untuk pengguna. Inisialisasi-nya terbatas pada fungsional perangkat keras yang terbagi menjadi dua bagian yaitu kernel dan sistem program. Kernel terbagi menjadi serangkaian interface dan device driver dan menyediakan sistem file, penjadwalan CPU, manajemen memori, dan fungsi-fungsi sistem operasi lainnya melalui system calls. Contoh sistem operasi : Unix.
Sistem Monolitik Keuntungan : Layanan dapat dilakukan sangat cepat karena terdapat di satu ruang alamat. Kerugian : Pengujian dan penghilangan kesalahan sulit karena tidak dapat dipisahkan dan dilokalisasi. Sulit dalam menyediakan fasilitas pengamanan. Merupakan pemborosan bila setiap komputer harus menjalankan kernel monolitik sangat besar sementara sebenarnya tidak memerlukan seluruh layanan yang disediakan kernel. Tidak fleksibel. Kesalahan pemograman satu bagian dari kernel menyebabkan matinya seluruh sistem.
Microservice adalah kumpulan proses independen dan kecil yang berkomunikasi antara satu dengan lainnya untuk membentuk aplikasi kompleks yang agnostik terhadap bahasa API apa pun. Servis-servis ini terdiri dari blok-blok kecil, terpisah, dan fokus pada tugas-tugas ringan untuk memfasilitasi metode modular dalam pembangunan sistem. Arsitektur bergaya microservice mulai menjadi standar dalam pembangunan sistem yang dinamis dan konstan berkembang.
Tiap-tiap service yang dibuat harus mengenskapsulasi data dengan logika bisnis yang beroperasi pada data itu sendiri, dan hanya dapat diakses melalui published service interface. Tidak ada database yang dapat diakses secara langsung dari luar service dan tidak ada data yang disharing antara setiap service.
Dengan begitu, setiap service yang dibangun harus memiliki landasan domainnya sendiri-sendiri dan process sharing data domain yang satu dengan yang lainnya hanya dapat dilakukan melalui published service interface
